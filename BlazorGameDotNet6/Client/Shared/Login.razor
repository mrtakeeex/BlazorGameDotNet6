@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject IToastService ToastService

Please log in below or <a href="register">register</a> for a new account.

<EditForm Model="@user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
    </div>
    <input type="submit" class="btn btn-primary" value="Login" />
    <ValidationSummary />
</EditForm>


@code {
    private UserLogin user = new UserLogin();

    // this method raises an event which will notify all the pages that the auth.state has changed
    private async void HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            // new item to local storage (later token)
            await LocalStorage.SetItemAsync<string>(Constants.AuthToken, result.Data);
            // we access the auth.provider
            await AuthenticationStateProvider.GetAuthenticationStateAsync();   
        }
        else
        {
            ToastService.ShowError(result.Message);
        }
    }
}
